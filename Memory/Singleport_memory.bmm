
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx primitives in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity SevenSegController is
    Port ( button : in  STD_LOGIC_VECTOR (3 downto 0);
           segment : out  STD_LOGIC_VECTOR (3 downto 0);
			  mclk: in std_logic;
			  leds: out std_logic_vector(7 downto 0));
end SevenSegController;

architecture Behavioral of SevenSegController is
	
	component SevenSegDecoder is--create 7seg decoder component
    Port ( a : in  STD_LOGIC_VECTOR (4 downto 0);
           b : out  STD_LOGIC_VECTOR (7 downto 0));
	end component;
	
	component singlePortMem is
	generic (
			Dwidth : integer := 16;
			Awidth : integer := 8);
	port (
			we,clk: in std_logic;
			addr: in std_logic_vector(Awidth-1 downto 0);
			din: in std_logic_vector(Dwidth-1 downto 0);
			dout: out std_logic_vector(Dwidth-1 downto 0));
	end component;
	
	signal input : STD_LOGIC_VECTOR (31 downto 0);--input signal for 20 bit input

	signal temp_segment : std_logic_vector(3 downto 0);	-- temporary storage for ssg
	signal clkdiv : std_logic_vector(14 downto 0);		-- counter for clock divider
	signal temp_digit : std_logic_vector(4 downto 0);

begin

   singleMem : singlePortMem
				generic map(32, 4)
				port map(we=>'0', clk=>mclk, addr=>button, din=>"00000000000000000000000000000000", dout=>input);
	
	process (mclk)						-- create system clock divder
	begin
		if mclk = '1' and mclk'Event then	
			clkdiv <= clkdiv +1;
		end if;	    
	end process;
	--variable temp_digit:STD_LOGIC_VECTOR (0 downto 4);
	decoder : SevenSegDecoder port map(a=>temp_digit,b=>leds);
	
	process(clkdiv(20), temp_segment,input)
	
   --create variables for each of the 4 digit segments	
	variable digit0:STD_LOGIC_VECTOR (4 downto 0);
	variable digit1:STD_LOGIC_VECTOR (4 downto 0);
	variable digit2:STD_LOGIC_VECTOR (4 downto 0);
	variable digit3:STD_LOGIC_VECTOR (4 downto 0);
	
	begin
	
	--assign digits to corresponding segment input
	digit0 := input(4 downto 0);
	digit1 := input(9 downto 5);
	digit2 := input(14 downto 10);
	digit3 := input(19 downto 15);
	temp_digit <= "00000";
	
	temp_segment<="1110";
	if clkdiv(14) = '1' and clkdiv(14)'Event then
			case temp_segment is				--used to rotate leds to light up
		 		when "1110"  =>
					temp_digit <= digit1;--display digit 1
					temp_segment <= "1101";
				when "1101"  =>
					temp_digit <= digit2; -- display digit 2
					temp_segment <= "1011";
				when "1011"  =>
					temp_digit <= digit3;--display digit 3
					temp_segment <= "0111";
				when others =>
					temp_digit <= digit0;--display digit 0
					temp_segment<="1110";
			end case;
	end if;
	end process;
	
	segment <= temp_segment;	--output ssg		
end Behavioral;

